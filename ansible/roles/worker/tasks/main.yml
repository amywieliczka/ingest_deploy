---
# tasks file for provision_worker
- name: include vaulted passwords from vaulted.yml
  include_vars: vaulted.yml
- name: install ssh private key for bitbucket
  template: src=id_rsa mode=600 dest=~/.ssh/id_rsa 
- name: install ssh pub key for bitbucket
  template: src=id_rsa.pub mode=600 dest=~/.ssh/id_rsa.pub 
- name: install development tools
  sudo: yes
  yum: "pkg={{ item }} state=latest"
  with_items:
    - git
    - gcc
    - make
    - libxslt-devel
    - libxml2-devel
- name: install amazon specific python libs
  when: ansible_distribution == "Amazon"
  sudo: yes
  yum: "pkg={{ item }} state=latest"
  with_items:
    - python27-devel
    - python27-pip
- name: install centos specific python libs
  when: ansible_distribution == "CentOS"
  sudo: yes
  yum: "pkg={{ item }} state=latest"
  with_items:
    - python-devel
    - python-pip
- name: install virtualenv, amazon
  sudo: yes
  pip:
    name: virtualenv
    state: present
    executable: pip-2.7
  when: ansible_distribution == "Amazon"
- name: install virtualenv, centors
  sudo: yes
  pip:
    name: virtualenv
    state: present
  when: ansible_distribution == "CentOS"
- name: make virtualenv directory
  file: path={{ dir_venv }} state=directory
- name: pull ingest harvester code to local box
  git: repo=https://github.com/mredar/harvester.git dest={{ dir_code }}/harvester
- name: pull dpla based code to local box
  git: 
    repo: git@bitbucket.org:mredar/dpla-ingestion.git
    dest: "{{ dir_code }}/dpla-ingestion"
    accept_hostkey: yes
    version: ucldc
- name: install akara and harvester dpla dependencies
  pip:
    state: present
    requirements: "{{ dir_code }}/dpla-ingestion/requirements.txt"
    executable: pip2.7
    virtualenv: "{{ dir_venv }}"
- name: install harvester code
  command: "{{ dir_venv }}/bin/python {{ dir_code }}/harvester/setup.py install"
  args:
    chdir: "{{ dir_code }}/harvester"
#  how do you keep dev, prod, stg separate.
#  with, vars per host.
- name: copy config file to akara dir???? configure & start akara
  template:
    src: akara.ini.j2
    dest: code/dpla-ingestion/akara.ini
# configure and start akara
- name: create akara.conf
  command: "{{ dir_venv }}/bin/python setup.py install"
  args:
    chdir: "{{ dir_code }}/dpla-ingestion"
- name: make akara run dir
  sudo: yes
  file:
    path: "{{ dir_akara_run }}"
    state: directory
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
- name: setup akara run dir
  command: "{{ dir_venv}}/bin/akara -f {{ dir_code }}/dpla-ingestion/akara.conf setup"
  args:
    chdir:  "{{ dir_akara_run }}"
- name: run akara
  command: "{{ dir_venv}}/bin/akara -f {{ dir_code }}/dpla-ingestion/akara.conf start"
  args:
    chdir:  "{{ dir_akara_run }}"
    creates: "{{ dir_akara_run }}/logs/akara.pid"
- name: make rqworker run dir
  sudo: yes
  file:
    path: "{{ dir_rqworker_run }}"
    state: directory
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
- name: create rqw-settings.py
  template:
    src: rqw-settings.py.j2
    dest: "{{ dir_rqworker_run }}/rqw-settings.py"
- name: make user ~/bin directory
  file: path=/home/{{ ansible_ssh_user}}/bin state=directory
- name: put start rqworker file in place
  template: src=start-rqworker.sh.j2 dest=~/bin/start-rqworker.sh mode=755
- name: put stop rqworker file in place
  template: src=stop-rqworker.sh.j2 dest=~/bin/stop-rqworker.sh mode=755
- name: start rqworker
  sudo: no
  shell: /home/ec2-user/bin/start-rqworker.sh creates="{{ dir_rqworker_run}}/rqworker.pid"
